"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[126],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>c});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),s=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,p=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),u=s(n),c=a,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return n?r.createElement(k,i(i({ref:e},d),{},{components:n})):r.createElement(k,i({ref:e},d))}));function c(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},895:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const l={id:"v2",title:"v2 (discontinued)",sidebar_position:1},i=void 0,o={unversionedId:"api-versions/v2",id:"api-versions/v2",title:"v2 (discontinued)",description:"This API version is discontinued, it's advised you use gRPC.",source:"@site/docs/api-versions/v2.md",sourceDirName:"api-versions",slug:"/api-versions/v2",permalink:"/export-api/docs/api-versions/v2",draft:!1,editUrl:"https://github.com/Fyko/export-api/edit/main/website/docs/api-versions/v2.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"v2",title:"v2 (discontinued)",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"gRPC",permalink:"/export-api/docs/api-versions/gRPC"},next:{title:"v1 (discontinued)",permalink:"/export-api/docs/api-versions/v1"}},p={},s=[{value:"Export Formats Enum",id:"export-formats-enum",level:2},{value:"<code>POST</code> <code>/v2/export</code>",id:"post-v2export",level:2},{value:"Examples",id:"examples",level:3},{value:"Typescript:",id:"typescript",level:4},{value:"Rust",id:"rust",level:4}],d={toc:s};function m(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"API Discontinued",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"This API version is discontinued, it's advised you use ",(0,a.kt)("a",{parentName:"p",href:"/export-api/docs/api-versions/gRPC"},"gRPC"),".")),(0,a.kt)("h2",{id:"export-formats-enum"},"Export Formats Enum"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Type")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"ID")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Description")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"File Extension")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PlainText"),(0,a.kt)("td",{parentName:"tr",align:null},"0"),(0,a.kt)("td",{parentName:"tr",align:null},"Export to a plaintext file"),(0,a.kt)("td",{parentName:"tr",align:null},"txt")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"HtmlDark"),(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"Export to an HTML file in dark mode"),(0,a.kt)("td",{parentName:"tr",align:null},"html")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"HtmlLight"),(0,a.kt)("td",{parentName:"tr",align:null},"2"),(0,a.kt)("td",{parentName:"tr",align:null},"Export to an HTML file in light mode"),(0,a.kt)("td",{parentName:"tr",align:null},"html")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"CSV"),(0,a.kt)("td",{parentName:"tr",align:null},"3"),(0,a.kt)("td",{parentName:"tr",align:null},"Export to a comma separated values file"),(0,a.kt)("td",{parentName:"tr",align:null},"csv")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"JSON"),(0,a.kt)("td",{parentName:"tr",align:null},"4"),(0,a.kt)("td",{parentName:"tr",align:null},"Export to a JSON file"),(0,a.kt)("td",{parentName:"tr",align:null},"json")))),(0,a.kt)("h2",{id:"post-v2export"},(0,a.kt)("inlineCode",{parentName:"h2"},"POST")," ",(0,a.kt)("inlineCode",{parentName:"h2"},"/v2/export")),(0,a.kt)("p",null,"Exports a channel. On success, it returns a file stream."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"JSON Body"),"  "),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Field")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Type")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Description")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"token"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The bot token for performing requests")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"channel_id"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The id of the channel to export")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"export_format"),(0,a.kt)("td",{parentName:"tr",align:null},"?ExportFormat"),(0,a.kt)("td",{parentName:"tr",align:null},"The format to export the channel as, defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"HtmlDark"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"date_format"),(0,a.kt)("td",{parentName:"tr",align:null},"?string"),(0,a.kt)("td",{parentName:"tr",align:null},"The ",(0,a.kt)("a",{parentName:"td",href:"https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings"},"date format")," for dates in exported files, defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"dd-MMM-yy hh:mm tt"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"after"),(0,a.kt)("td",{parentName:"tr",align:null},"?string"),(0,a.kt)("td",{parentName:"tr",align:null},"Only include messages sent after this date")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"before"),(0,a.kt)("td",{parentName:"tr",align:null},"?string"),(0,a.kt)("td",{parentName:"tr",align:null},"Only include messages sent before this date")))),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("h4",{id:"typescript"},"Typescript:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import fetch from 'node-fetch';\n\nasync function exportChannel(channel_id: string, token: string): Promise<Buffer> {\n    const response = await fetch('http://exportapi:80/v2/export', {\n        method: 'POST',\n        body: JSON.stringify({ channel_id, token }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (response.ok) {\n        return response.buffer();\n    }\n    throw Error('Channel export failed!');\n}\n")),(0,a.kt)("h4",{id:"rust"},"Rust"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// reqwest = { version = "0.10", features = ["json"] }\nuse reqwest::Client;\nuse std::collections::HashMap;\nuse std::io::copy;\nuse std::fs::File;\n\nasync fn export_channel(channelId: &str, token: &str) -> Result<File, reqwest::Error> {\n    let client = Client::new();\n    let mut map = HashMap::new();\n    map.insert("channel_id", "channel id");\n    map.insert("token", "discord token");\n\n    let file = client.post("http://exportapi:80/v2/export").json(&map).await?.text().await?;\n\n    let dest = File::create("myexport.html")?;\n    copy(&mut file.as_bytes(), &mut dest)?;\n\n    Ok(dest)\n}\n')))}m.isMDXComponent=!0}}]);