"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[805],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(k,i(i({ref:t},d),{},{components:n})):r.createElement(k,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3004:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"v1",title:"v1 (discontinued)",sidebar_position:2},i=void 0,l={unversionedId:"api-versions/v1",id:"api-versions/v1",title:"v1 (discontinued)",description:"This API version is discontinued, it's advised you use gRPC.",source:"@site/docs/api-versions/v1.md",sourceDirName:"api-versions",slug:"/api-versions/v1",permalink:"/export-api/docs/api-versions/v1",draft:!1,editUrl:"https://github.com/Fyko/export-api/edit/main/website/docs/api-versions/v1.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"v1",title:"v1 (discontinued)",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"v2 (discontinued)",permalink:"/export-api/docs/api-versions/v2"}},s={},p=[{value:"<code>POST</code> <code>/v1/export</code>",id:"post-v1export",level:2},{value:"Examples",id:"examples",level:3},{value:"Typescript:",id:"typescript",level:4},{value:"Rust",id:"rust",level:4}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"API Discontinued",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"This API version is discontinued, it's advised you use ",(0,a.kt)("a",{parentName:"p",href:"/export-api/docs/api-versions/gRPC"},"gRPC"),".")),(0,a.kt)("h2",{id:"post-v1export"},(0,a.kt)("inlineCode",{parentName:"h2"},"POST")," ",(0,a.kt)("inlineCode",{parentName:"h2"},"/v1/export")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"JSON Body")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Field")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Type")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Description")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"token"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The bot token for performing requests")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"channelId"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The id of the channel to export")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Response Codes")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Status")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Description")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"200"),(0,a.kt)("td",{parentName:"tr",align:null},"Success - exported channel sent as text/html")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"401"),(0,a.kt)("td",{parentName:"tr",align:null},"Unauthorized - bad Discord bot token")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"409"),(0,a.kt)("td",{parentName:"tr",align:null},"Conflict - unknown channel")))),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("h4",{id:"typescript"},"Typescript:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import fetch from 'node-fetch';\n\nasync function exportChannel(channelId: string, token: string): Promise<Buffer> {\n    const response = await fetch('http://exportapi:80/v1/export', {\n        method: 'POST',\n        body: JSON.stringify({ channelId, token }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (response.ok) {\n        return response.buffer();\n    }\n    throw Error('Channel export failed!');\n}\n")),(0,a.kt)("h4",{id:"rust"},"Rust"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// reqwest = { version = "0.10", features = ["json"] }\nuse reqwest::Client;\nuse std::collections::HashMap;\nuse std::io::copy;\nuse std::fs::File;\n\nasync fn export_channel(channelId: &str, token: &str) -> Result<File, reqwest::Error> {\n    let client = Client::new();\n    let mut map = HashMap::new();\n    map.insert("channelId", "channel id");\n    map.insert("token", "discord token");\n\n    let file = client.post("http://exportapi:80/v1/export").json(&map).await?.text().await?;\n\n    let dest = File::create("myexport.html")?;\n    copy(&mut file.as_bytes(), &mut dest)?;\n\n    Ok(dest)\n}\n')))}c.isMDXComponent=!0}}]);