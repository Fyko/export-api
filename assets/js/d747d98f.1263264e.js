"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[575],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=s(n),c=a,g=u["".concat(p,".").concat(c)]||u[c]||d[c]||o;return n?r.createElement(g,l(l({ref:t},m),{},{components:n})):r.createElement(g,l({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},106:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},assets:function(){return m},toc:function(){return d},default:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={id:"gRPC",title:"gRPC",sidebar_position:0},p=void 0,s={unversionedId:"api-versions/gRPC",id:"api-versions/gRPC",title:"gRPC",description:"v3 of the Export API introduces a gRPC API. One of the major upsides of using the gRPC protocol is a stream of progress updates and finally streaming the file back to the client.",source:"@site/docs/api-versions/gRPC.md",sourceDirName:"api-versions",slug:"/api-versions/gRPC",permalink:"/export-api/docs/api-versions/gRPC",editUrl:"https://github.com/Fyko/export-api/edit/main/website/docs/api-versions/gRPC.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"gRPC",title:"gRPC",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/export-api/docs/setup"},next:{title:"v2 (discontinued)",permalink:"/export-api/docs/api-versions/v2"}},m={},d=[{value:"Protobuf Definition",id:"protobuf-definition",level:2},{value:"<code>Exporter/CreateExport</code>",id:"exportercreateexport",level:2},{value:"Export Formats Enum",id:"export-formats-enum",level:3},{value:"CreateExportRequest",id:"createexportrequest",level:3},{value:"CreateExportResponse",id:"createexportresponse",level:3},{value:"ExportComplete",id:"exportcomplete",level:3},{value:"Examples",id:"examples",level:2},{value:"High-level",id:"high-level",level:3},{value:"Low-level",id:"low-level",level:3}],u={toc:d};function c(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"v3 of the Export API introduces a gRPC API. One of the major upsides of using the gRPC protocol is a stream of progress updates and finally streaming the file back to the client."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Client Package")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@fyko/export-api")," package includes a typed JavaScript client and will be referenced in ",(0,o.kt)("a",{parentName:"p",href:"#examples"},"Examples"),"."))),(0,o.kt)("h2",{id:"protobuf-definition"},"Protobuf Definition"),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Server Reflection")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The gRPC service has ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/grpc/grpc/blob/master/doc/server-reflection.md"},"server reflection"),", allowing you to test the API in Postman."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"service Exporter {\n  rpc CreateExport (CreateExportRequest) returns (stream CreateExportResponse);\n}\n\nenum ExportFormat {\n    PlainText = 0;\n    HtmlDark = 1;\n    HtmlLight = 2;\n    CSV = 3;\n    JSON = 4;\n}\n\nmessage CreateExportRequest {\n  string token = 1;\n  string channel_id = 2;\n  ExportFormat export_format = 3;\n  string date_format = 4;\n  string after = 5;\n  string before = 6;\n}\n\nmessage CreateExportResponse {\n  oneof ResponseType {\n    double progress = 1;\n    ExportComplete data = 2;\n  }\n}\n\nmessage ExportComplete {\n  int32 message_count = 1;\n  bytes data = 2;\n}\n")),(0,o.kt)("h2",{id:"exportercreateexport"},(0,o.kt)("inlineCode",{parentName:"h2"},"Exporter/CreateExport")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"rpc CreateExport (CreateExportRequest) returns (stream CreateExportResponse);"))),(0,o.kt)("h3",{id:"export-formats-enum"},"Export Formats Enum"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Type")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"ID")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Description")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"File Extension")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PlainText"),(0,o.kt)("td",{parentName:"tr",align:null},"0"),(0,o.kt)("td",{parentName:"tr",align:null},"Export to a plaintext file"),(0,o.kt)("td",{parentName:"tr",align:null},"txt")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"HtmlDark"),(0,o.kt)("td",{parentName:"tr",align:null},"1"),(0,o.kt)("td",{parentName:"tr",align:null},"Export to an HTML file in dark mode"),(0,o.kt)("td",{parentName:"tr",align:null},"html")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"HtmlLight"),(0,o.kt)("td",{parentName:"tr",align:null},"2"),(0,o.kt)("td",{parentName:"tr",align:null},"Export to an HTML file in light mode"),(0,o.kt)("td",{parentName:"tr",align:null},"html")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"CSV"),(0,o.kt)("td",{parentName:"tr",align:null},"3"),(0,o.kt)("td",{parentName:"tr",align:null},"Export to a comma separated values file"),(0,o.kt)("td",{parentName:"tr",align:null},"csv")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"JSON"),(0,o.kt)("td",{parentName:"tr",align:null},"4"),(0,o.kt)("td",{parentName:"tr",align:null},"Export to a JSON file"),(0,o.kt)("td",{parentName:"tr",align:null},"json")))),(0,o.kt)("h3",{id:"createexportrequest"},"CreateExportRequest"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Field")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Type")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Description")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"token"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"The bot token for performing requests")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"channel_id"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"The id of the channel to export")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"export_format"),(0,o.kt)("td",{parentName:"tr",align:null},"?",(0,o.kt)("a",{parentName:"td",href:"#export-formats-enum"},"ExportFormat")),(0,o.kt)("td",{parentName:"tr",align:null},"The format to export the channel as, defaults to ",(0,o.kt)("inlineCode",{parentName:"td"},"PlainText"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"date_format"),(0,o.kt)("td",{parentName:"tr",align:null},"?string"),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("a",{parentName:"td",href:"https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings"},"date format")," for dates in exported files, defaults to ",(0,o.kt)("inlineCode",{parentName:"td"},"dd-MMM-yy hh:mm tt"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"after"),(0,o.kt)("td",{parentName:"tr",align:null},"?string"),(0,o.kt)("td",{parentName:"tr",align:null},"Only include messages sent after this date")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"before"),(0,o.kt)("td",{parentName:"tr",align:null},"?string"),(0,o.kt)("td",{parentName:"tr",align:null},"Only include messages sent before this date")))),(0,o.kt)("h3",{id:"createexportresponse"},"CreateExportResponse"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Field")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Type")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Description")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"progress"),(0,o.kt)("td",{parentName:"tr",align:null},"int64"),(0,o.kt)("td",{parentName:"tr",align:null},"A decimal representing the progress of the export")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"data"),(0,o.kt)("td",{parentName:"tr",align:null},"?",(0,o.kt)("a",{parentName:"td",href:"#exportcomplete"},"ExportComplete")),(0,o.kt)("td",{parentName:"tr",align:null},"The file data once ",(0,o.kt)("inlineCode",{parentName:"td"},"progress")," equals ",(0,o.kt)("inlineCode",{parentName:"td"},"1"))))),(0,o.kt)("h3",{id:"exportcomplete"},"ExportComplete"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Field")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Type")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Description")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"message_count"),(0,o.kt)("td",{parentName:"tr",align:null},"int"),(0,o.kt)("td",{parentName:"tr",align:null},"The number of messages exported")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"data"),(0,o.kt)("td",{parentName:"tr",align:null},"byte[]"),(0,o.kt)("td",{parentName:"tr",align:null},"The exported file in 32kb chunks")))),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"high-level"},"High-level"),(0,o.kt)("p",null,"This example uses the new ",(0,o.kt)("inlineCode",{parentName:"p"},"createExport"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"createExportedClient"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"promisifyExportResult")," functions released in ",(0,o.kt)("inlineCode",{parentName:"p"},"@fyko/export-api@0.3"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { writeFile } from "fs/promises";\nimport { createExport, createExporterClient, promisifyExportResult } from "@fyko/export-api/client";\nimport {\n  ExportFormat\n} from "@fyko/export-api/types";\n\nconst stream = createExport(client, {\n  channelId: process.env.DISCORD_CHANNEL!,\n  token: process.env.DISCORD_TOKEN!,\n  exportFormat: ExportFormat.HTMLDARK,\n});\n\nstream.on("progress", (progress) =>  console.log(`progress: ${progress}`));\n\nconst [count, file] = await promisifyExportResult(stream);\n\nconsole.log(`export created with ${count} messages (${file.byteLength} bytes)`);\nawait writeFile("./foo.html", file);\n')),(0,o.kt)("h3",{id:"low-level"},"Low-level"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { credentials } from "@grpc/grpc-js";\nimport { ExporterClient } from "@fyko/export-api/client";\nimport {\n  CreateExportRequest,\n  CreateExportResponse,\n  ExportFormat,\n} from "@fyko/export-api/types";\nimport { writeFile } from "fs/promises";\n\n// creates a new gRPC client\nconst client = new ExporterClient(\n  `localhost:${process.env.PORT}`,\n  credentials.createInsecure()\n);\n\nvoid (async () => {\n  // new CreateExport Request\n  const request = new CreateExportRequest();\n  // set required options\n  request.setChannelId(process.env.DISCORD_CHANNEL!);\n  request.setToken(process.env.DISCORD_TOKEN!);\n  // set optional options\n  request.setExportFormat(ExportFormat.HTMLDARK);\n\n  //\n  return new Promise(async (res, rej) => {\n    // "POST" the request\n    const stream = client.createExport(request);\n\n    const chunks: (string | Uint8Array)[] = [];\n    let progress = 0;\n    stream.on("data", (response: CreateExportResponse) => {\n      // if `response.progress` is present\n      const p = response.getProgress();\n      if (p && p > progress) {\n        progress = p;\n        console.log((p * 100).toFixed() + "%");\n      }\n\n      // if finally sending the file itself, push to chunk array\n      const data = response.getData();\n      const inner = data?.getData();\n      if (inner) {\n        console.log(`Inner exists!`);\n        chunks.push(inner);\n      }\n    });\n\n    // once the server closes the stream,\n    // we can finally write the file\n    stream.on("end", async () => {\n      await writeFile("./foo.html", chunks);\n      return res(void 0);\n    });\n\n    stream.on("error", rej);\n  });\n})();\n')))}c.isMDXComponent=!0}}]);